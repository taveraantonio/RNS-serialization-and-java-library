<?xml version="1.0" encoding="UTF-8"?>

<project basedir="." default="build" name="RNS-1">
	<description>
			Script for DP2-RNS Assignment 1
	</description>

	<!-- The "RnsReaderFactory" used for RnsInfo and as data generator for tests -->
	<property name="RnsInfo.RnsReaderFactory" value="it.polito.dp2.RNS.Random.RnsReaderFactoryImpl" />

	<!-- The default output file for RnsInfoSerializer -->
	<property name="output" location="${java.io.tmpdir}/out1.xml"/>

	<!-- The default test case -->
	<property name="testcase" value="0" />
	<!-- The default test class -->
	<property name="test.class" value="it.polito.dp2.RNS.lab1.tests.RnsTests" />

	<property name="lab1.location" location="." />
	<property name="src.dir" location="${lab1.location}/src" />
	<property name="build.dir" location="${lab1.location}/build" />
	<property name="lib.dir" location="${lab1.location}/lib" />
	<property name="gen.dir" location="${lab1.location}/gen" />
	<property name="schema.dir" location="${lab1.location}/xsd" />
	<property name="lib.jar" value="lab1.jar" />
	
	<property name="debug" value="true" />
	<property name="debuglevel" value="source,lines,vars" />
	<property name="target" value="1.8" />
	<property name="source" value="1.8" />

	<!-- The classpath to be used for compilation of the solution -->
	<path id="RNS.classpath">
		<pathelement location="${lib.dir}/RNS.jar" />
	</path>
	
	<!-- Target setseed: sets seed to time stamp if not yet set -->
	<target name="setseed" unless="seed">
		<tstamp>
			<format property="seed" pattern="1HHmmss" />
		</tstamp>
	</target>
	
	<!-- Target init -->
	<target name="init">
		<mkdir dir="${build.dir}" />
	</target>

	<!-- Target chk-bindings -->
	<target name="-chk-bindings">
		<uptodate property="generate-bindings.notRequired" targetfile="${gen.dir}/.flagfile">
			<srcfiles dir="${schema.dir}" includes="**/*.xsd" />
		</uptodate>
	</target>

	<!-- Target generate-bindings -->
	<target name="generate-bindings" unless="generate-bindings.notRequired" depends="init,-chk-bindings" description="Generate bindings from schema">
		<exec executable="xjc" failonerror="true" >
			<arg value="-d" />
			<arg value="${gen.dir}" />
			<arg value="-p" />
			<arg value="it.polito.dp2.RNS.sol1.jaxb" />
			<arg value="${schema.dir}/rnsInfo.xsd" />
		</exec>
		<touch file="${gen.dir}/.flagfile" />
	</target>

	<!-- Target clean -->
	<target name="clean" description="Clean all">
		<delete dir="${build.dir}" />
		<delete includeemptydirs="true">
		  <fileset dir="${gen.dir}" includes="**/*" defaultexcludes="false"/>
		</delete>
		<delete includeemptydirs="true">
		    <fileset dir="${lab1.location}" includes="temp*/**" defaultexcludes="false"/>
		</delete>
		<delete file="${lab1.location}/lab1.zip"/>
		<delete file="${lab1.location}/testout.xml"/>
	</target>

	<!-- Target build -->
	<target name="build" depends="init, generate-bindings" description="Build the solution of Assignment 1">
		<echo>Building the submitted solution (if needed)...</echo>
		<javac 
			destdir="${build.dir}"
			debug="${debug}"
			debuglevel="${debuglevel}"
			source="${source}"
			target="${target}"
			includeantruntime="false">
				<src path="${src.dir}"/>
				<src path="${gen.dir}"/>
				<include name="it/polito/dp2/RNS/sol1/**" />
				<classpath>
					<path refid="RNS.classpath" />
				</classpath>
		</javac>
		<echo>Done.</echo>
	</target>

	<!-- The target for compiling the RnsInfo application -->
	<target name="buildRnsInfo" description="Build the sample application">
		<echo>Building RnsInfo (if needed)...</echo>
		<mkdir dir="${build.dir}" />
		<javac 
			destdir="${build.dir}"
			debug="${debug}"
			debuglevel="${debuglevel}"
			source="${source}"
			target="${target}"
			includeantruntime="false">
				<src path="${src.dir}" />
				<include name="it/polito/dp2/RNS/lab1/RnsInfo.java" />
				<classpath>
					<path refid="RNS.classpath" />
				</classpath>
		</javac>
		<echo>Done.</echo>
	</target>

	<!-- The target for running the RnsInfo application -->
	<target name="RnsInfo" depends="buildRnsInfo, setseed" description="Run the sample application">
		<java classname="it.polito.dp2.RNS.lab1.RnsInfo" failonerror="true" fork="yes">
			<sysproperty key="it.polito.dp2.RNS.Random.seed" value="${seed}"/>
			<sysproperty key="it.polito.dp2.RNS.Random.testcase" value="${testcase}"/>
			<sysproperty key="it.polito.dp2.RNS.RnsReaderFactory" value="${RnsInfo.RnsReaderFactory}"/>
			<classpath>
				<path refid="RNS.classpath" />
				<pathelement location="${lib.dir}/RNSRandom.jar"/>
				<pathelement path="${build.dir}"/>
			</classpath>
		</java>
	</target>

	<!-- Target RnsInfoSerializer -->
	<target name="RnsInfoSerializer" depends="setseed, build" description="Run the RnsInfoSerializer application">
		<echo>Output file: ${output}</echo>
		<echo>Testcase: ${testcase}</echo>
		<echo>Seed: ${seed}</echo>
		<echo />
		<antcall target="RnsInfoSerializer.test">
			<param name="outfile" value="${output}"/>
		</antcall>
		<echo>Done.</echo>
	</target>
	
	<!-- Target runFuncTest -->
	<target name="runFuncTest" depends="setseed" description="run functional tests">
		<antcall target="runFuncTest.real">
			<param name="test.class" value="${test.class}" />
			<param name="exit.code" value="126" />
		</antcall>
	</target>

	<!-- Target RnsInfoSerializer.test -->
	<target name="RnsInfoSerializer.test" depends="build">
		<java classname="it.polito.dp2.RNS.sol1.RnsInfoSerializer" failonerror="true" fork="yes">
			<sysproperty key="it.polito.dp2.RNS.RnsReaderFactory" value="${RnsInfo.RnsReaderFactory}" />
			<sysproperty key="it.polito.dp2.RNS.Random.seed" value="${seed}"/>
			<sysproperty key="it.polito.dp2.RNS.Random.testcase" value="${testcase}"/>
			<arg value="${outfile}" />
			<classpath>
				<path refid="RNS.classpath" />
				<pathelement location="${lib.dir}/RNSRandom.jar"/>
				<pathelement path="${build.dir}" />
			</classpath>
		</java>
		<echo>Done.</echo>
	</target>
	
	<target name="runFuncTest.real" depends="build">
		<tempfile property="temp.dir" destdir="${lab1.location}" prefix="temp"/>
		<tempfile property="temp.xmlfile" destdir="${temp.dir}" prefix="out" suffix=".xml"/>

		<echo>The tests will run using '${temp.dir}' as working directory.</echo>
		<echo>Testcase: ${testcase}</echo>
		<echo>Seed: ${seed}</echo>
		<echo />
		<echo>Copying the xsd/rnsInfo.xsd file to the working directory...</echo>
		<copy file="${schema.dir}/rnsInfo.xsd" todir="${temp.dir}/xsd"/>
		<echo>File copied.</echo>

		<antcall target="RnsInfoSerializer.test">
			<param name="outfile" value="${temp.xmlfile}"/>
		</antcall>
		
		<echo>Validating the generated XML file: ${temp.xmlfile} with ${lib.jar}</echo>
		<java fork="yes" classname="it.polito.dp2.xml.XMLSchemaValidator" failonerror="false" dir="${temp.dir}" resultproperty="validation_result">
			<arg path="${temp.dir}/xsd/rnsInfo.xsd"/>
			<arg path="${temp.xmlfile}"/>
			<classpath>
				<pathelement location="${lib.dir}/${lib.jar}"/>
			</classpath>
		</java>
		<fail status="125" message="*** XML validation FAILED ***">
			<condition>
				<not>
					<equals arg1="0" arg2="${validation_result}"/>
				</not>
			</condition>
		</fail>
		<echo>*** XML file validated ***</echo>

		<junit printsummary="yes" dir="${temp.dir}" fork="yes" haltonfailure="no" showoutput="no" filtertrace="true">
			<sysproperty key="it.polito.dp2.RNS.Random.testcase" value="${testcase}"/>
			<sysproperty key="it.polito.dp2.RNS.Random.seed" value="${seed}"/>
			<sysproperty key="it.polito.dp2.RNS.sol1.RnsInfo.file " value="${temp.xmlfile}"/>
			<formatter type="xml" usefile="true"/>
			<formatter type="plain" usefile="false"/>
			<test haltonfailure="no" failureproperty="test_failed" outfile="testout" name="${test.class}"/>
			<classpath>
				<path refid="RNS.classpath" />
				<pathelement location="${lib.dir}/RNSRandom.jar"/>
				<pathelement path="${build.dir}" />
				<pathelement location="${lib.dir}/${lib.jar}"/>
				<pathelement location="${lib.dir}/junit-4.12.jar"/>
				<pathelement location="${lib.dir}/hamcrest-core-1.3.jar"/>
			</classpath>
		</junit>
		<fail if="test_failed" status="${exit.code}" message="*** Some Tests FAILED ***"/>
		<echo>*** All Tests PASSED  ***</echo>

		<delete dir="${temp.dir}"/>

	</target>
	
	<!-- Target make-final-zip for building the final zip containing the solution -->
	<target name="make-zip" description="make zip to be submitted">
		<zip destfile="lab1.zip"
			basedir="${lab1.location}"
		    includes="src/it/polito/dp2/RNS/sol1/**/*.java xsd/* doc.txt"
		/>
	</target>

</project>
